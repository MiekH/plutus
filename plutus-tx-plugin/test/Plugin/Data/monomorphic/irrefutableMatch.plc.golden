(program
  (let
    (nonrec)
    (datatypebind
      (datatype
        (tyvardecl MyMonoData (type))

        MyMonoData_match
        (vardecl Mono (fun (con integer) (fun (con integer) MyMonoData)))
        (vardecl Mono (fun (con integer) MyMonoData))
        (vardecl Mono (fun (con integer) MyMonoData))
      )
    )
    (lam
      ds
      MyMonoData
      [
        [
          [
            { [ MyMonoData_match ds ] (con integer) }
            (lam
              p
              (prod (con integer) (con integer))
              { (abs e (type) (error e)) (con integer) }
            )
          ]
          (lam
            p
            (prod (con integer))
            (let
              (nonrec)
              (termbind (strict) (vardecl a (con integer)) (proj 0 p))
              a
            )
          )
        ]
        (lam p (prod (con integer)) { (abs e (type) (error e)) (con integer) })
      ]
    )
  )
)